class vulnerability_checker:
    def __init__(self, vulnerable_packages: list[dict], all_packages: list[dict]):
        # constructor which takes two parameters, vulnerable_packages and all_packages
        self.vulnerable_packages = vulnerable_packages
        self.all_packages = all_packages
        self.check_vulnerable_versions()

    def check_vulnerable_versions(self):
        # loop through each vulnerable package
        for vuln_package in self.vulnerable_packages:
            # get the package name and vulnerable versions
            vul_package_name = vuln_package['package_name']
            vuln_versions = vuln_package['vul_version'].split(' || ')
            # loop through each package in the all_packages list
            for package_name, package_info in self.all_packages.items():
                if package_name == vul_package_name:
                    # loop through each version of the package
                    for version in package_info['versions']:
                        #print(version)
                        # check if the version is vulnerable
                        if self.is_vulnerable(version, vuln_versions):
                            # add the version to the vulnerable package's vuln_version_found list
                            if 'vuln_version_found' not in vuln_package:
                                vuln_package['vuln_version_found'] = [version]
                            elif version not in vuln_package['vuln_version_found']:
                                vuln_package['vuln_version_found'].append(version)
                            
        print(self.vulnerable_packages)

    def is_vulnerable(self, version, vuln_versions):
        # loop through each vulnerable version
        for vuln_version in vuln_versions:
            # exact match
            if vuln_version == version:
                return True
            # range match
            elif '-' in vuln_version:
                # split the range into start and end versions
                range_parts = vuln_version.split('-')
                if len(range_parts) != 2:
                    raise ValueError(f"Invalid range: {vuln_version}")
                start_version, end_version = range_parts
                if start_version.startswith('<'):
                    # less than range
                    if end_version.startswith('<'):
                        if version < start_version[1:] and version < end_version[1:]:
                            return True
                    # less than and greater than range
                    elif end_version.startswith('>'):
                        if version < start_version[1:] and version > end_version[1:]:
                            return True
                    # less than equal to range
                    else:
                        if version < start_version[1:] and version <= end_version:
                            return True
                elif start_version.startswith('>'):
                    # greater than range
                    if end_version.startswith('>'):
                        if version > start_version[1:] and version > end_version[1:]:
                            return True
                    # greater than and less than range
                    elif end_version.startswith('<'):
                        if version > start_version[1:] and version < end_version[1:]:
                            return True
                    # greater than equal to range
                    else:
                        if version > start_version[1:] and version <= end_version:
                            return True
                else:
                    # equal to and less than range
                    if end_version.startswith('<'):
                        if version <= start_version and version < end_version[1:]:
                            return True
                    # equal to and greater than range
                    elif end_version.startswith('>'):
                        if version <= start_version and version > end_version[1:]:
                            return True
                    # equal to and less than equal to range
                    else:
                        if version <= start_version and version <= end_version:
                            return True
            # less than match
            elif vuln_version.startswith('<'):
                if version < vuln_version[1:]:
                    return True
            # greater than match
            elif vuln_version.startswith('>'):
                if version > vuln_version[1:]:
                    return True
        # no matches found
        return False

