from Log import Log
from Processor.VulnerabilityRange import VulnerabilityRange
import json


class VulnerabilityProcessor:
    def __init__(self, vulnerable_packages: list[dict], all_packages: list[dict]):
        # constructor which takes two parameters, vulnerable_packages and all_packages
        self.vulnerable_packages = vulnerable_packages
        self.all_packages = all_packages
        self.cleanVulnerablePackages = []
        self.check_vulnerable_versions()

    def check_vulnerable_versions(self):
        # loop through each vulnerable package
        for vuln_package in self.vulnerable_packages:
            # get the package name and vulnerable versions
            vul_package_name = vuln_package['package_name']
            vuln_versions = vuln_package['vul_version']
            # check if vuln package is already present
            present = self.CheckForDuplicatePackages(vuln_package)
            # if not present and is unique add the vulnerable and non vulnerable versions of the package found
            if not present:
                
                for package_name, package_info in self.all_packages.items():
                    if package_name == vul_package_name:
                        # loop through each version of the package
                        for version in package_info['versions']:
                            # print(version)
                            # check if the version is vulnerable
                            vuln_package['vuln_version_found'] = []
                            vuln_package['not_vulnerable_versions'] = []
                            if VulnerabilityRange.is_vulnerable(version, vuln_versions, None):
                                # add the version to the vulnerable package's vuln_version_found list
                                vuln_package['vuln_version_found'].append(
                                    version)
                            else:

                                vuln_package['not_vulnerable_versions'].append(
                                    version)
                self.cleanVulnerablePackages.append(vuln_package)
        
        
    def CheckForDuplicatePackages(self, vulnerable_package):
        # Initialize an empty dictionary to store the merged vulnerabilities
        package_name = vulnerable_package["package_name"]
        version = vulnerable_package["vul_version"]
        path = vulnerable_package["path"][0]
        # Loop through each vulnerability in the list
        for existing_vulnerability in self.cleanVulnerablePackages:
            if existing_vulnerability["package_name"] == package_name and existing_vulnerability["vul_version"] == version:
                existing_vulnerability["path"].append(path)
                return True
        return False
